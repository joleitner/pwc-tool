

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE SCHEMA IF NOT EXISTS "permissions";


ALTER SCHEMA "permissions" OWNER TO "postgres";


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."roles" AS ENUM (
    'admin',
    'helper',
    'participant'
);




CREATE OR REPLACE FUNCTION "permissions"."is_admin"() RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 
    FROM public.users 
    WHERE public.users.id = auth.uid() AND public.users.role ='admin'
  );
END
$$;


ALTER FUNCTION "permissions"."is_admin"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "permissions"."is_helper"() RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 
    FROM public.users 
    WHERE public.users.id = auth.uid() AND public.users.role in ('helper', 'admin')
  );
END
$$;



SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."images" (
    "id" bigint NOT NULL,
    "path" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "survey" bigint NOT NULL,
    "metadata" "jsonb"
);


ALTER TABLE "public"."images" OWNER TO "postgres";


ALTER TABLE "public"."images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."participations" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "survey" bigint NOT NULL,
    "user" "uuid" NOT NULL,
    "id" bigint NOT NULL,
    "started" timestamp with time zone,
    "finished" timestamp with time zone,
    "initial" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."participations" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."pwc_results" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "choice" bigint NOT NULL,
    "time_taken" double precision NOT NULL,
    "user" "uuid" NOT NULL,
    "image_1" bigint NOT NULL,
    "image_2" bigint NOT NULL,
    "survey" bigint NOT NULL
);


ALTER TABLE "public"."pwc_results" OWNER TO "postgres";


ALTER TABLE "public"."pwc_results" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pwc_results_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."questionnaires" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "eyes" bigint NOT NULL,
    "smile" bigint NOT NULL,
    "gaze" bigint NOT NULL,
    "occluded" bigint NOT NULL,
    "sharpness" bigint NOT NULL,
    "lighting" bigint NOT NULL,
    "face_orientation" bigint NOT NULL,
    "centering" bigint NOT NULL,
    "self_observation" bigint NOT NULL,
    "background" bigint NOT NULL,
    "additional_features" "text",
    "feature_order" "jsonb" NOT NULL
);


ALTER TABLE "public"."questionnaires" OWNER TO "postgres";


ALTER TABLE "public"."questionnaires" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."questionnaires_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."registrations" (
    "email" "text" NOT NULL,
    "verified" boolean DEFAULT false NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "id" "uuid" NOT NULL,
    "locale" "text"
);


ALTER TABLE "public"."registrations" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."suggestions" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user" "uuid" NOT NULL,
    "images" "text"[],
    "emails" "text"[] NOT NULL
);




ALTER TABLE "public"."suggestions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."suggestions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."participations" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."survey_users_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."surveys" (
    "id" bigint NOT NULL,
    "public_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "image_count" bigint,
    "participant_count" bigint
);


ALTER TABLE "public"."surveys" OWNER TO "postgres";


ALTER TABLE "public"."surveys" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."surveys_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "role" "public"."roles" DEFAULT 'participant'::"public"."roles" NOT NULL
);


ALTER TABLE "public"."users" OWNER TO "postgres";


ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."registrations"
    ADD CONSTRAINT "participants_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pwc_results"
    ADD CONSTRAINT "pwc_results_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."questionnaires"
    ADD CONSTRAINT "questionnaires_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."suggestions"
    ADD CONSTRAINT "suggestions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."participations"
    ADD CONSTRAINT "survey_users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."surveys"
    ADD CONSTRAINT "surveys_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_survey_fkey" FOREIGN KEY ("survey") REFERENCES "public"."surveys"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."registrations"
    ADD CONSTRAINT "participants_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pwc_results"
    ADD CONSTRAINT "pwc_results_choice_fkey" FOREIGN KEY ("choice") REFERENCES "public"."images"("id");



ALTER TABLE ONLY "public"."pwc_results"
    ADD CONSTRAINT "pwc_results_image_1_fkey" FOREIGN KEY ("image_1") REFERENCES "public"."images"("id");



ALTER TABLE ONLY "public"."pwc_results"
    ADD CONSTRAINT "pwc_results_image_2_fkey" FOREIGN KEY ("image_2") REFERENCES "public"."images"("id");



ALTER TABLE ONLY "public"."pwc_results"
    ADD CONSTRAINT "pwc_results_survey_fkey" FOREIGN KEY ("survey") REFERENCES "public"."surveys"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pwc_results"
    ADD CONSTRAINT "pwc_results_user_fkey" FOREIGN KEY ("user") REFERENCES "public"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."questionnaires"
    ADD CONSTRAINT "questionnaires_user_fkey" FOREIGN KEY ("user") REFERENCES "public"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."suggestions"
    ADD CONSTRAINT "suggestions_user_fkey" FOREIGN KEY ("user") REFERENCES "public"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."participations"
    ADD CONSTRAINT "survey_users_survey_fkey" FOREIGN KEY ("survey") REFERENCES "public"."surveys"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."participations"
    ADD CONSTRAINT "survey_users_user_fkey" FOREIGN KEY ("user") REFERENCES "public"."users"("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Add for admins and helpers" ON "public"."suggestions" FOR INSERT TO "authenticated" WITH CHECK ("permissions"."is_helper"());



CREATE POLICY "Create Survey for Admins" ON "public"."surveys" FOR INSERT TO "authenticated" WITH CHECK ("permissions"."is_admin"());



CREATE POLICY "Delete for Admins" ON "public"."registrations" FOR DELETE TO "authenticated" USING ("permissions"."is_admin"());



CREATE POLICY "Delete for admins" ON "public"."suggestions" FOR DELETE TO "authenticated" USING ("permissions"."is_admin"());



CREATE POLICY "Enable read access for authenticated users" ON "public"."images" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable read access for authenticated users" ON "public"."surveys" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Insert for Admins" ON "public"."images" FOR INSERT TO "authenticated" WITH CHECK ("permissions"."is_admin"());



CREATE POLICY "Insert for admins" ON "public"."participations" FOR INSERT TO "authenticated" WITH CHECK ("permissions"."is_admin"());



CREATE POLICY "Insert for admins" ON "public"."users" FOR INSERT TO "authenticated" WITH CHECK ("permissions"."is_admin"());



CREATE POLICY "Insert for all" ON "public"."registrations" FOR INSERT WITH CHECK (true);



CREATE POLICY "Insert for authenticated users" ON "public"."pwc_results" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Insert for authenticated users" ON "public"."questionnaires" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Read for admins and helpers" ON "public"."suggestions" FOR SELECT TO "authenticated" USING ("permissions"."is_helper"());



CREATE POLICY "Select for admin" ON "public"."questionnaires" FOR SELECT TO "authenticated" USING ("permissions"."is_admin"());



CREATE POLICY "Select for admin and own entry" ON "public"."pwc_results" FOR SELECT TO "authenticated" USING (("permissions"."is_admin"() OR ("user" = "auth"."uid"())));



CREATE POLICY "Select for admin and self" ON "public"."users" FOR SELECT TO "authenticated" USING ((("id" = "auth"."uid"()) OR "permissions"."is_admin"()));



CREATE POLICY "Select for admins or own entry" ON "public"."registrations" FOR SELECT TO "authenticated" USING (("permissions"."is_admin"() OR ("id" = "auth"."uid"())));



CREATE POLICY "Select for authenticated users" ON "public"."participations" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Update for admins" ON "public"."users" FOR UPDATE TO "authenticated" USING ("permissions"."is_admin"());



CREATE POLICY "Update for admins and helpers" ON "public"."suggestions" FOR UPDATE TO "authenticated" USING ("permissions"."is_helper"());



CREATE POLICY "Update for authenticated users" ON "public"."participations" FOR UPDATE TO "authenticated" USING (true);



CREATE POLICY "Update for own entry" ON "public"."registrations" FOR UPDATE TO "authenticated" USING (("permissions"."is_admin"() OR ("id" = "auth"."uid"())));



ALTER TABLE "public"."images" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."participations" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."pwc_results" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."questionnaires" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."registrations" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."suggestions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."surveys" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."registrations";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."surveys";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."users";






GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";





























































































































































































GRANT ALL ON FUNCTION "permissions"."is_admin"() TO "anon";
GRANT ALL ON FUNCTION "permissions"."is_admin"() TO "authenticated";
GRANT ALL ON FUNCTION "permissions"."is_admin"() TO "service_role";






























GRANT ALL ON TABLE "public"."images" TO "anon";
GRANT ALL ON TABLE "public"."images" TO "authenticated";
GRANT ALL ON TABLE "public"."images" TO "service_role";



GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."participations" TO "anon";
GRANT ALL ON TABLE "public"."participations" TO "authenticated";
GRANT ALL ON TABLE "public"."participations" TO "service_role";



GRANT ALL ON TABLE "public"."pwc_results" TO "anon";
GRANT ALL ON TABLE "public"."pwc_results" TO "authenticated";
GRANT ALL ON TABLE "public"."pwc_results" TO "service_role";



GRANT ALL ON SEQUENCE "public"."pwc_results_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pwc_results_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pwc_results_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."questionnaires" TO "anon";
GRANT ALL ON TABLE "public"."questionnaires" TO "authenticated";
GRANT ALL ON TABLE "public"."questionnaires" TO "service_role";



GRANT ALL ON SEQUENCE "public"."questionnaires_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."questionnaires_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."questionnaires_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."registrations" TO "anon";
GRANT ALL ON TABLE "public"."registrations" TO "authenticated";
GRANT ALL ON TABLE "public"."registrations" TO "service_role";



GRANT ALL ON TABLE "public"."suggestions" TO "postgres";
GRANT ALL ON TABLE "public"."suggestions" TO "anon";
GRANT ALL ON TABLE "public"."suggestions" TO "authenticated";
GRANT ALL ON TABLE "public"."suggestions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."suggestions_id_seq" TO "postgres";
GRANT ALL ON SEQUENCE "public"."suggestions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."suggestions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."suggestions_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."survey_users_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."survey_users_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."survey_users_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."surveys" TO "anon";
GRANT ALL ON TABLE "public"."surveys" TO "authenticated";
GRANT ALL ON TABLE "public"."surveys" TO "service_role";



GRANT ALL ON SEQUENCE "public"."surveys_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."surveys_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."surveys_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
